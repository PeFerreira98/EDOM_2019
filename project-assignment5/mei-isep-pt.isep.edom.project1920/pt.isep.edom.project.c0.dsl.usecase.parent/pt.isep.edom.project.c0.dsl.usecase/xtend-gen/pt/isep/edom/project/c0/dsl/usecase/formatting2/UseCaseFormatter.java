/**
 * generated by Xtext 2.12.0
 */
package pt.isep.edom.project.c0.dsl.usecase.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import pt.isep.edom.project.c0.dsl.usecase.services.UseCaseGrammarAccess;
import pt.isep.edom.project.c0.mm.usecase.Actor;
import pt.isep.edom.project.c0.mm.usecase.Association;
import pt.isep.edom.project.c0.mm.usecase.Extend;
import pt.isep.edom.project.c0.mm.usecase.Include;
import pt.isep.edom.project.c0.mm.usecase.UseCase;
import pt.isep.edom.project.c0.mm.usecase.UseCaseModel;

@SuppressWarnings("all")
public class UseCaseFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private UseCaseGrammarAccess _useCaseGrammarAccess;
  
  protected void _format(final UseCaseModel useCaseModel, @Extension final IFormattableDocument document) {
    EList<Actor> _actor = useCaseModel.getActor();
    for (final Actor actor : _actor) {
      document.<Actor>format(actor);
    }
    EList<Association> _association = useCaseModel.getAssociation();
    for (final Association association : _association) {
      document.<Association>format(association);
    }
    EList<UseCase> _usecase = useCaseModel.getUsecase();
    for (final UseCase useCase : _usecase) {
      document.<UseCase>format(useCase);
    }
  }
  
  protected void _format(final UseCase useCase, @Extension final IFormattableDocument document) {
    EList<Extend> _extend = useCase.getExtend();
    for (final Extend extend : _extend) {
      document.<Extend>format(extend);
    }
    EList<Include> _include = useCase.getInclude();
    for (final Include include : _include) {
      document.<Include>format(include);
    }
  }
  
  public void format(final Object useCase, final IFormattableDocument document) {
    if (useCase instanceof XtextResource) {
      _format((XtextResource)useCase, document);
      return;
    } else if (useCase instanceof UseCase) {
      _format((UseCase)useCase, document);
      return;
    } else if (useCase instanceof UseCaseModel) {
      _format((UseCaseModel)useCase, document);
      return;
    } else if (useCase instanceof EObject) {
      _format((EObject)useCase, document);
      return;
    } else if (useCase == null) {
      _format((Void)null, document);
      return;
    } else if (useCase != null) {
      _format(useCase, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(useCase, document).toString());
    }
  }
}
