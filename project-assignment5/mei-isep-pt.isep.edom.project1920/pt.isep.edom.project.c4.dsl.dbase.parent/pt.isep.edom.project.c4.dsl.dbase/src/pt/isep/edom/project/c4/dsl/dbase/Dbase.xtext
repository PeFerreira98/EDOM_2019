// automatically generated by Xtext
grammar pt.isep.edom.project.c4.dsl.dbase.Dbase with org.eclipse.xtext.common.Terminals

import "http://www.example.org/dbase" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

DbaseModel returns DbaseModel:
	{DbaseModel}
	'DbaseModel'
	name=EString
	'{'
		('tables' '{' tables+=Table ( "," tables+=Table)* '}' )?
	'}';





EString returns ecore::EString:
	STRING | ID;

Table returns Table:
	{Table}
	'Table'
	name=EString
	'{'
		('entity' entity=EString)?
		('columns' '{' columns+=Column ( "," columns+=Column)* '}' )?
		('constraint' '{' constraint+=Constraint ( "," constraint+=Constraint)* '}' )?
	'}';

Column returns Column:
	{Column}
	'Column'
	name=EString
	'{'
		('type' type=ColumnType)?
	'}';

Constraint returns Constraint:
	'Constraint'
	name=EString
	'{'
		('constraintType' constraintType=ConstraintType)?
		'column' column=Column
		('relationship' '{' relationship+=Relationship ( "," relationship+=Relationship)* '}' )?
	'}';

enum ColumnType returns ColumnType:
				VARCHAR = 'VARCHAR' | INTEGER = 'INTEGER' | REAL = 'REAL' | BOOL = 'BOOL';

enum ConstraintType returns ConstraintType:
				PK = 'PK' | UNIQUE = 'UNIQUE' | NOTNULL = 'NOTNULL' | FK = 'FK';

Relationship returns Relationship:
	'Relationship'
	'{'
		('cardinalityType' cardinalityType=CardinalityType)?
		'table' table=Table
	'}';

enum CardinalityType returns CardinalityType:
				OneToOne = 'OneToOne' | OneToMany = 'OneToMany' | ManyToMany = 'ManyToMany';
