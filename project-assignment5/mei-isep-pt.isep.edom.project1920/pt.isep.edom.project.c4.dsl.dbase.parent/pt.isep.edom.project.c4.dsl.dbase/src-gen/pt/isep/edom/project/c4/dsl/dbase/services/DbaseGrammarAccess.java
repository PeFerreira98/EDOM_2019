/*
 * generated by Xtext 2.12.0
 */
package pt.isep.edom.project.c4.dsl.dbase.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DbaseGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DbaseModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.isep.edom.project.c4.dsl.dbase.Dbase.DbaseModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDbaseModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDbaseModelKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cTablesKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cTablesAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cTablesTableParserRuleCall_4_2_0 = (RuleCall)cTablesAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cTablesAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cTablesTableParserRuleCall_4_3_1_0 = (RuleCall)cTablesAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//DbaseModel:
		//	{DbaseModel}
		//	'DbaseModel'
		//	name=EString
		//	'{' ('tables' '{' tables+=Table ("," tables+=Table)* '}')?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{DbaseModel} 'DbaseModel' name=EString '{' ('tables' '{' tables+=Table ("," tables+=Table)* '}')? '}'
		public Group getGroup() { return cGroup; }
		
		//{DbaseModel}
		public Action getDbaseModelAction_0() { return cDbaseModelAction_0; }
		
		//'DbaseModel'
		public Keyword getDbaseModelKeyword_1() { return cDbaseModelKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('tables' '{' tables+=Table ("," tables+=Table)* '}')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'tables'
		public Keyword getTablesKeyword_4_0() { return cTablesKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//tables+=Table
		public Assignment getTablesAssignment_4_2() { return cTablesAssignment_4_2; }
		
		//Table
		public RuleCall getTablesTableParserRuleCall_4_2_0() { return cTablesTableParserRuleCall_4_2_0; }
		
		//("," tables+=Table)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//tables+=Table
		public Assignment getTablesAssignment_4_3_1() { return cTablesAssignment_4_3_1; }
		
		//Table
		public RuleCall getTablesTableParserRuleCall_4_3_1_0() { return cTablesTableParserRuleCall_4_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.isep.edom.project.c4.dsl.dbase.Dbase.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class TableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.isep.edom.project.c4.dsl.dbase.Dbase.Table");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTableAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTableKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cEntityKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cEntityAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cEntityEStringParserRuleCall_4_1_0 = (RuleCall)cEntityAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cColumnsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cColumnsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cColumnsColumnParserRuleCall_5_2_0 = (RuleCall)cColumnsAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cColumnsAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cColumnsColumnParserRuleCall_5_3_1_0 = (RuleCall)cColumnsAssignment_5_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cConstraintKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cConstraintAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cConstraintConstraintParserRuleCall_6_2_0 = (RuleCall)cConstraintAssignment_6_2.eContents().get(0);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Keyword cCommaKeyword_6_3_0 = (Keyword)cGroup_6_3.eContents().get(0);
		private final Assignment cConstraintAssignment_6_3_1 = (Assignment)cGroup_6_3.eContents().get(1);
		private final RuleCall cConstraintConstraintParserRuleCall_6_3_1_0 = (RuleCall)cConstraintAssignment_6_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Table:
		//	{Table}
		//	'Table'
		//	name=EString
		//	'{' ('entity' entity=EString)? ('columns' '{' columns+=Column ("," columns+=Column)* '}')? ('constraint' '{'
		//	constraint+=Constraint ("," constraint+=Constraint)* '}')?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Table} 'Table' name=EString '{' ('entity' entity=EString)? ('columns' '{' columns+=Column ("," columns+=Column)* '}')?
		//('constraint' '{' constraint+=Constraint ("," constraint+=Constraint)* '}')? '}'
		public Group getGroup() { return cGroup; }
		
		//{Table}
		public Action getTableAction_0() { return cTableAction_0; }
		
		//'Table'
		public Keyword getTableKeyword_1() { return cTableKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('entity' entity=EString)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'entity'
		public Keyword getEntityKeyword_4_0() { return cEntityKeyword_4_0; }
		
		//entity=EString
		public Assignment getEntityAssignment_4_1() { return cEntityAssignment_4_1; }
		
		//EString
		public RuleCall getEntityEStringParserRuleCall_4_1_0() { return cEntityEStringParserRuleCall_4_1_0; }
		
		//('columns' '{' columns+=Column ("," columns+=Column)* '}')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'columns'
		public Keyword getColumnsKeyword_5_0() { return cColumnsKeyword_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }
		
		//columns+=Column
		public Assignment getColumnsAssignment_5_2() { return cColumnsAssignment_5_2; }
		
		//Column
		public RuleCall getColumnsColumnParserRuleCall_5_2_0() { return cColumnsColumnParserRuleCall_5_2_0; }
		
		//("," columns+=Column)*
		public Group getGroup_5_3() { return cGroup_5_3; }
		
		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }
		
		//columns+=Column
		public Assignment getColumnsAssignment_5_3_1() { return cColumnsAssignment_5_3_1; }
		
		//Column
		public RuleCall getColumnsColumnParserRuleCall_5_3_1_0() { return cColumnsColumnParserRuleCall_5_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_4() { return cRightCurlyBracketKeyword_5_4; }
		
		//('constraint' '{' constraint+=Constraint ("," constraint+=Constraint)* '}')?
		public Group getGroup_6() { return cGroup_6; }
		
		//'constraint'
		public Keyword getConstraintKeyword_6_0() { return cConstraintKeyword_6_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }
		
		//constraint+=Constraint
		public Assignment getConstraintAssignment_6_2() { return cConstraintAssignment_6_2; }
		
		//Constraint
		public RuleCall getConstraintConstraintParserRuleCall_6_2_0() { return cConstraintConstraintParserRuleCall_6_2_0; }
		
		//("," constraint+=Constraint)*
		public Group getGroup_6_3() { return cGroup_6_3; }
		
		//","
		public Keyword getCommaKeyword_6_3_0() { return cCommaKeyword_6_3_0; }
		
		//constraint+=Constraint
		public Assignment getConstraintAssignment_6_3_1() { return cConstraintAssignment_6_3_1; }
		
		//Constraint
		public RuleCall getConstraintConstraintParserRuleCall_6_3_1_0() { return cConstraintConstraintParserRuleCall_6_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6_4() { return cRightCurlyBracketKeyword_6_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class ColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.isep.edom.project.c4.dsl.dbase.Dbase.Column");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cColumnAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cColumnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cTypeKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTypeColumnTypeEnumRuleCall_4_1_0 = (RuleCall)cTypeAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Column:
		//	{Column}
		//	'Column'
		//	name=EString
		//	'{' ('type' type=ColumnType)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Column} 'Column' name=EString '{' ('type' type=ColumnType)? '}'
		public Group getGroup() { return cGroup; }
		
		//{Column}
		public Action getColumnAction_0() { return cColumnAction_0; }
		
		//'Column'
		public Keyword getColumnKeyword_1() { return cColumnKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('type' type=ColumnType)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'type'
		public Keyword getTypeKeyword_4_0() { return cTypeKeyword_4_0; }
		
		//type=ColumnType
		public Assignment getTypeAssignment_4_1() { return cTypeAssignment_4_1; }
		
		//ColumnType
		public RuleCall getTypeColumnTypeEnumRuleCall_4_1_0() { return cTypeColumnTypeEnumRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.isep.edom.project.c4.dsl.dbase.Dbase.Constraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstraintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cConstraintTypeKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cConstraintTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cConstraintTypeConstraintTypeEnumRuleCall_3_1_0 = (RuleCall)cConstraintTypeAssignment_3_1.eContents().get(0);
		private final Keyword cColumnKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cColumnAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cColumnColumnParserRuleCall_5_0 = (RuleCall)cColumnAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cRelationshipKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cRelationshipAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cRelationshipRelationshipParserRuleCall_6_2_0 = (RuleCall)cRelationshipAssignment_6_2.eContents().get(0);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Keyword cCommaKeyword_6_3_0 = (Keyword)cGroup_6_3.eContents().get(0);
		private final Assignment cRelationshipAssignment_6_3_1 = (Assignment)cGroup_6_3.eContents().get(1);
		private final RuleCall cRelationshipRelationshipParserRuleCall_6_3_1_0 = (RuleCall)cRelationshipAssignment_6_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Constraint:
		//	'Constraint'
		//	name=EString
		//	'{' ('constraintType' constraintType=ConstraintType)?
		//	'column' column=Column ('relationship' '{' relationship+=Relationship ("," relationship+=Relationship)* '}')?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Constraint' name=EString '{' ('constraintType' constraintType=ConstraintType)? 'column' column=Column ('relationship'
		//'{' relationship+=Relationship ("," relationship+=Relationship)* '}')? '}'
		public Group getGroup() { return cGroup; }
		
		//'Constraint'
		public Keyword getConstraintKeyword_0() { return cConstraintKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('constraintType' constraintType=ConstraintType)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'constraintType'
		public Keyword getConstraintTypeKeyword_3_0() { return cConstraintTypeKeyword_3_0; }
		
		//constraintType=ConstraintType
		public Assignment getConstraintTypeAssignment_3_1() { return cConstraintTypeAssignment_3_1; }
		
		//ConstraintType
		public RuleCall getConstraintTypeConstraintTypeEnumRuleCall_3_1_0() { return cConstraintTypeConstraintTypeEnumRuleCall_3_1_0; }
		
		//'column'
		public Keyword getColumnKeyword_4() { return cColumnKeyword_4; }
		
		//column=Column
		public Assignment getColumnAssignment_5() { return cColumnAssignment_5; }
		
		//Column
		public RuleCall getColumnColumnParserRuleCall_5_0() { return cColumnColumnParserRuleCall_5_0; }
		
		//('relationship' '{' relationship+=Relationship ("," relationship+=Relationship)* '}')?
		public Group getGroup_6() { return cGroup_6; }
		
		//'relationship'
		public Keyword getRelationshipKeyword_6_0() { return cRelationshipKeyword_6_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }
		
		//relationship+=Relationship
		public Assignment getRelationshipAssignment_6_2() { return cRelationshipAssignment_6_2; }
		
		//Relationship
		public RuleCall getRelationshipRelationshipParserRuleCall_6_2_0() { return cRelationshipRelationshipParserRuleCall_6_2_0; }
		
		//("," relationship+=Relationship)*
		public Group getGroup_6_3() { return cGroup_6_3; }
		
		//","
		public Keyword getCommaKeyword_6_3_0() { return cCommaKeyword_6_3_0; }
		
		//relationship+=Relationship
		public Assignment getRelationshipAssignment_6_3_1() { return cRelationshipAssignment_6_3_1; }
		
		//Relationship
		public RuleCall getRelationshipRelationshipParserRuleCall_6_3_1_0() { return cRelationshipRelationshipParserRuleCall_6_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6_4() { return cRightCurlyBracketKeyword_6_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class RelationshipElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pt.isep.edom.project.c4.dsl.dbase.Dbase.Relationship");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRelationshipKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCardinalityTypeKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cCardinalityTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCardinalityTypeCardinalityTypeEnumRuleCall_2_1_0 = (RuleCall)cCardinalityTypeAssignment_2_1.eContents().get(0);
		private final Keyword cTableKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTableAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTableTableParserRuleCall_4_0 = (RuleCall)cTableAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Relationship:
		//	'Relationship'
		//	'{' ('cardinalityType' cardinalityType=CardinalityType)?
		//	'table' table=Table
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Relationship' '{' ('cardinalityType' cardinalityType=CardinalityType)? 'table' table=Table '}'
		public Group getGroup() { return cGroup; }
		
		//'Relationship'
		public Keyword getRelationshipKeyword_0() { return cRelationshipKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//('cardinalityType' cardinalityType=CardinalityType)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'cardinalityType'
		public Keyword getCardinalityTypeKeyword_2_0() { return cCardinalityTypeKeyword_2_0; }
		
		//cardinalityType=CardinalityType
		public Assignment getCardinalityTypeAssignment_2_1() { return cCardinalityTypeAssignment_2_1; }
		
		//CardinalityType
		public RuleCall getCardinalityTypeCardinalityTypeEnumRuleCall_2_1_0() { return cCardinalityTypeCardinalityTypeEnumRuleCall_2_1_0; }
		
		//'table'
		public Keyword getTableKeyword_3() { return cTableKeyword_3; }
		
		//table=Table
		public Assignment getTableAssignment_4() { return cTableAssignment_4; }
		
		//Table
		public RuleCall getTableTableParserRuleCall_4_0() { return cTableTableParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	
	public class ColumnTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "pt.isep.edom.project.c4.dsl.dbase.Dbase.ColumnType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cVARCHAREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cVARCHARVARCHARKeyword_0_0 = (Keyword)cVARCHAREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cINTEGEREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cINTEGERINTEGERKeyword_1_0 = (Keyword)cINTEGEREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cREALEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cREALREALKeyword_2_0 = (Keyword)cREALEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cBOOLEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cBOOLBOOLKeyword_3_0 = (Keyword)cBOOLEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum ColumnType:
		//	VARCHAR | INTEGER | REAL | BOOL;
		public EnumRule getRule() { return rule; }
		
		//VARCHAR | INTEGER | REAL | BOOL
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VARCHAR
		public EnumLiteralDeclaration getVARCHAREnumLiteralDeclaration_0() { return cVARCHAREnumLiteralDeclaration_0; }
		
		//'VARCHAR'
		public Keyword getVARCHARVARCHARKeyword_0_0() { return cVARCHARVARCHARKeyword_0_0; }
		
		//INTEGER
		public EnumLiteralDeclaration getINTEGEREnumLiteralDeclaration_1() { return cINTEGEREnumLiteralDeclaration_1; }
		
		//'INTEGER'
		public Keyword getINTEGERINTEGERKeyword_1_0() { return cINTEGERINTEGERKeyword_1_0; }
		
		//REAL
		public EnumLiteralDeclaration getREALEnumLiteralDeclaration_2() { return cREALEnumLiteralDeclaration_2; }
		
		//'REAL'
		public Keyword getREALREALKeyword_2_0() { return cREALREALKeyword_2_0; }
		
		//BOOL
		public EnumLiteralDeclaration getBOOLEnumLiteralDeclaration_3() { return cBOOLEnumLiteralDeclaration_3; }
		
		//'BOOL'
		public Keyword getBOOLBOOLKeyword_3_0() { return cBOOLBOOLKeyword_3_0; }
	}
	public class ConstraintTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "pt.isep.edom.project.c4.dsl.dbase.Dbase.ConstraintType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPKEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPKPKKeyword_0_0 = (Keyword)cPKEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cUNIQUEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cUNIQUEUNIQUEKeyword_1_0 = (Keyword)cUNIQUEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cNOTNULLEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cNOTNULLNOTNULLKeyword_2_0 = (Keyword)cNOTNULLEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cFKEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cFKFKKeyword_3_0 = (Keyword)cFKEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum ConstraintType:
		//	PK | UNIQUE | NOTNULL | FK;
		public EnumRule getRule() { return rule; }
		
		//PK | UNIQUE | NOTNULL | FK
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PK
		public EnumLiteralDeclaration getPKEnumLiteralDeclaration_0() { return cPKEnumLiteralDeclaration_0; }
		
		//'PK'
		public Keyword getPKPKKeyword_0_0() { return cPKPKKeyword_0_0; }
		
		//UNIQUE
		public EnumLiteralDeclaration getUNIQUEEnumLiteralDeclaration_1() { return cUNIQUEEnumLiteralDeclaration_1; }
		
		//'UNIQUE'
		public Keyword getUNIQUEUNIQUEKeyword_1_0() { return cUNIQUEUNIQUEKeyword_1_0; }
		
		//NOTNULL
		public EnumLiteralDeclaration getNOTNULLEnumLiteralDeclaration_2() { return cNOTNULLEnumLiteralDeclaration_2; }
		
		//'NOTNULL'
		public Keyword getNOTNULLNOTNULLKeyword_2_0() { return cNOTNULLNOTNULLKeyword_2_0; }
		
		//FK
		public EnumLiteralDeclaration getFKEnumLiteralDeclaration_3() { return cFKEnumLiteralDeclaration_3; }
		
		//'FK'
		public Keyword getFKFKKeyword_3_0() { return cFKFKKeyword_3_0; }
	}
	public class CardinalityTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "pt.isep.edom.project.c4.dsl.dbase.Dbase.CardinalityType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOneToOneEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cOneToOneOneToOneKeyword_0_0 = (Keyword)cOneToOneEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOneToManyEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOneToManyOneToManyKeyword_1_0 = (Keyword)cOneToManyEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cManyToManyEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cManyToManyManyToManyKeyword_2_0 = (Keyword)cManyToManyEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum CardinalityType:
		//	OneToOne | OneToMany | ManyToMany;
		public EnumRule getRule() { return rule; }
		
		//OneToOne | OneToMany | ManyToMany
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OneToOne
		public EnumLiteralDeclaration getOneToOneEnumLiteralDeclaration_0() { return cOneToOneEnumLiteralDeclaration_0; }
		
		//'OneToOne'
		public Keyword getOneToOneOneToOneKeyword_0_0() { return cOneToOneOneToOneKeyword_0_0; }
		
		//OneToMany
		public EnumLiteralDeclaration getOneToManyEnumLiteralDeclaration_1() { return cOneToManyEnumLiteralDeclaration_1; }
		
		//'OneToMany'
		public Keyword getOneToManyOneToManyKeyword_1_0() { return cOneToManyOneToManyKeyword_1_0; }
		
		//ManyToMany
		public EnumLiteralDeclaration getManyToManyEnumLiteralDeclaration_2() { return cManyToManyEnumLiteralDeclaration_2; }
		
		//'ManyToMany'
		public Keyword getManyToManyManyToManyKeyword_2_0() { return cManyToManyManyToManyKeyword_2_0; }
	}
	
	private final DbaseModelElements pDbaseModel;
	private final EStringElements pEString;
	private final TableElements pTable;
	private final ColumnElements pColumn;
	private final ConstraintElements pConstraint;
	private final ColumnTypeElements eColumnType;
	private final ConstraintTypeElements eConstraintType;
	private final RelationshipElements pRelationship;
	private final CardinalityTypeElements eCardinalityType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DbaseGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDbaseModel = new DbaseModelElements();
		this.pEString = new EStringElements();
		this.pTable = new TableElements();
		this.pColumn = new ColumnElements();
		this.pConstraint = new ConstraintElements();
		this.eColumnType = new ColumnTypeElements();
		this.eConstraintType = new ConstraintTypeElements();
		this.pRelationship = new RelationshipElements();
		this.eCardinalityType = new CardinalityTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("pt.isep.edom.project.c4.dsl.dbase.Dbase".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//DbaseModel:
	//	{DbaseModel}
	//	'DbaseModel'
	//	name=EString
	//	'{' ('tables' '{' tables+=Table ("," tables+=Table)* '}')?
	//	'}';
	public DbaseModelElements getDbaseModelAccess() {
		return pDbaseModel;
	}
	
	public ParserRule getDbaseModelRule() {
		return getDbaseModelAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//Table:
	//	{Table}
	//	'Table'
	//	name=EString
	//	'{' ('entity' entity=EString)? ('columns' '{' columns+=Column ("," columns+=Column)* '}')? ('constraint' '{'
	//	constraint+=Constraint ("," constraint+=Constraint)* '}')?
	//	'}';
	public TableElements getTableAccess() {
		return pTable;
	}
	
	public ParserRule getTableRule() {
		return getTableAccess().getRule();
	}
	
	//Column:
	//	{Column}
	//	'Column'
	//	name=EString
	//	'{' ('type' type=ColumnType)?
	//	'}';
	public ColumnElements getColumnAccess() {
		return pColumn;
	}
	
	public ParserRule getColumnRule() {
		return getColumnAccess().getRule();
	}
	
	//Constraint:
	//	'Constraint'
	//	name=EString
	//	'{' ('constraintType' constraintType=ConstraintType)?
	//	'column' column=Column ('relationship' '{' relationship+=Relationship ("," relationship+=Relationship)* '}')?
	//	'}';
	public ConstraintElements getConstraintAccess() {
		return pConstraint;
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}
	
	//enum ColumnType:
	//	VARCHAR | INTEGER | REAL | BOOL;
	public ColumnTypeElements getColumnTypeAccess() {
		return eColumnType;
	}
	
	public EnumRule getColumnTypeRule() {
		return getColumnTypeAccess().getRule();
	}
	
	//enum ConstraintType:
	//	PK | UNIQUE | NOTNULL | FK;
	public ConstraintTypeElements getConstraintTypeAccess() {
		return eConstraintType;
	}
	
	public EnumRule getConstraintTypeRule() {
		return getConstraintTypeAccess().getRule();
	}
	
	//Relationship:
	//	'Relationship'
	//	'{' ('cardinalityType' cardinalityType=CardinalityType)?
	//	'table' table=Table
	//	'}';
	public RelationshipElements getRelationshipAccess() {
		return pRelationship;
	}
	
	public ParserRule getRelationshipRule() {
		return getRelationshipAccess().getRule();
	}
	
	//enum CardinalityType:
	//	OneToOne | OneToMany | ManyToMany;
	public CardinalityTypeElements getCardinalityTypeAccess() {
		return eCardinalityType;
	}
	
	public EnumRule getCardinalityTypeRule() {
		return getCardinalityTypeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
