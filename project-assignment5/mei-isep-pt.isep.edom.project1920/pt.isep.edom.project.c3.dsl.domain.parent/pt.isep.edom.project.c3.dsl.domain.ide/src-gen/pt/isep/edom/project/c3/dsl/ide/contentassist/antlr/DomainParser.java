/*
 * generated by Xtext 2.19.0
 */
package pt.isep.edom.project.c3.dsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import pt.isep.edom.project.c3.dsl.ide.contentassist.antlr.internal.InternalDomainParser;
import pt.isep.edom.project.c3.dsl.services.DomainGrammarAccess;

public class DomainParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(DomainGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, DomainGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
			builder.put(grammarAccess.getFieldTypeAccess().getAlternatives(), "rule__FieldType__Alternatives");
			builder.put(grammarAccess.getDomainModelAccess().getGroup(), "rule__DomainModel__Group__0");
			builder.put(grammarAccess.getDomainModelAccess().getGroup_4(), "rule__DomainModel__Group_4__0");
			builder.put(grammarAccess.getDomainModelAccess().getGroup_4_3(), "rule__DomainModel__Group_4_3__0");
			builder.put(grammarAccess.getDomainModelAccess().getGroup_5(), "rule__DomainModel__Group_5__0");
			builder.put(grammarAccess.getDomainModelAccess().getGroup_5_3(), "rule__DomainModel__Group_5_3__0");
			builder.put(grammarAccess.getEntityAccess().getGroup(), "rule__Entity__Group__0");
			builder.put(grammarAccess.getEntityAccess().getGroup_4(), "rule__Entity__Group_4__0");
			builder.put(grammarAccess.getEntityAccess().getGroup_4_3(), "rule__Entity__Group_4_3__0");
			builder.put(grammarAccess.getEntityAccess().getGroup_5(), "rule__Entity__Group_5__0");
			builder.put(grammarAccess.getEntityAccess().getGroup_5_3(), "rule__Entity__Group_5_3__0");
			builder.put(grammarAccess.getValueObjectAccess().getGroup(), "rule__ValueObject__Group__0");
			builder.put(grammarAccess.getFieldAccess().getGroup(), "rule__Field__Group__0");
			builder.put(grammarAccess.getFieldAccess().getGroup_4(), "rule__Field__Group_4__0");
			builder.put(grammarAccess.getReferenceAccess().getGroup(), "rule__Reference__Group__0");
			builder.put(grammarAccess.getReferenceAccess().getGroup_7(), "rule__Reference__Group_7__0");
			builder.put(grammarAccess.getReferenceAccess().getGroup_8(), "rule__Reference__Group_8__0");
			builder.put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
			builder.put(grammarAccess.getDomainModelAccess().getNameAssignment_2(), "rule__DomainModel__NameAssignment_2");
			builder.put(grammarAccess.getDomainModelAccess().getEntitiesAssignment_4_2(), "rule__DomainModel__EntitiesAssignment_4_2");
			builder.put(grammarAccess.getDomainModelAccess().getEntitiesAssignment_4_3_1(), "rule__DomainModel__EntitiesAssignment_4_3_1");
			builder.put(grammarAccess.getDomainModelAccess().getValueobjectAssignment_5_2(), "rule__DomainModel__ValueobjectAssignment_5_2");
			builder.put(grammarAccess.getDomainModelAccess().getValueobjectAssignment_5_3_1(), "rule__DomainModel__ValueobjectAssignment_5_3_1");
			builder.put(grammarAccess.getEntityAccess().getRootAssignment_0(), "rule__Entity__RootAssignment_0");
			builder.put(grammarAccess.getEntityAccess().getNameAssignment_2(), "rule__Entity__NameAssignment_2");
			builder.put(grammarAccess.getEntityAccess().getFieldsAssignment_4_2(), "rule__Entity__FieldsAssignment_4_2");
			builder.put(grammarAccess.getEntityAccess().getFieldsAssignment_4_3_1(), "rule__Entity__FieldsAssignment_4_3_1");
			builder.put(grammarAccess.getEntityAccess().getReferencesAssignment_5_2(), "rule__Entity__ReferencesAssignment_5_2");
			builder.put(grammarAccess.getEntityAccess().getReferencesAssignment_5_3_1(), "rule__Entity__ReferencesAssignment_5_3_1");
			builder.put(grammarAccess.getValueObjectAccess().getIsIdAssignment_0(), "rule__ValueObject__IsIdAssignment_0");
			builder.put(grammarAccess.getValueObjectAccess().getNameAssignment_2(), "rule__ValueObject__NameAssignment_2");
			builder.put(grammarAccess.getValueObjectAccess().getFieldAssignment_5(), "rule__ValueObject__FieldAssignment_5");
			builder.put(grammarAccess.getFieldAccess().getNameAssignment_2(), "rule__Field__NameAssignment_2");
			builder.put(grammarAccess.getFieldAccess().getTypeAssignment_4_1(), "rule__Field__TypeAssignment_4_1");
			builder.put(grammarAccess.getReferenceAccess().getNameAssignment_1(), "rule__Reference__NameAssignment_1");
			builder.put(grammarAccess.getReferenceAccess().getUpperBoundAssignment_4(), "rule__Reference__UpperBoundAssignment_4");
			builder.put(grammarAccess.getReferenceAccess().getLowerBoundAssignment_6(), "rule__Reference__LowerBoundAssignment_6");
			builder.put(grammarAccess.getReferenceAccess().getEntityAssignment_7_1(), "rule__Reference__EntityAssignment_7_1");
			builder.put(grammarAccess.getReferenceAccess().getValueobjectAssignment_8_1(), "rule__Reference__ValueobjectAssignment_8_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private DomainGrammarAccess grammarAccess;

	@Override
	protected InternalDomainParser createParser() {
		InternalDomainParser result = new InternalDomainParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DomainGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DomainGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
