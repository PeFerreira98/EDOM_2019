/**
 * generated by Xtext 2.19.0
 */
package pt.isep.edom.project.c3.dsl.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import pt.isep.edom.project.c3.dsl.services.DomainGrammarAccess;
import pt.isep.edom.project.c3.mm.domain.DomainModel;
import pt.isep.edom.project.c3.mm.domain.Entity;
import pt.isep.edom.project.c3.mm.domain.Field;
import pt.isep.edom.project.c3.mm.domain.Reference;
import pt.isep.edom.project.c3.mm.domain.ValueObject;

@SuppressWarnings("all")
public class DomainFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private DomainGrammarAccess _domainGrammarAccess;
  
  protected void _format(final DomainModel domainModel, @Extension final IFormattableDocument document) {
    EList<Entity> _entities = domainModel.getEntities();
    for (final Entity entity : _entities) {
      document.<Entity>format(entity);
    }
    EList<ValueObject> _valueobject = domainModel.getValueobject();
    for (final ValueObject valueObject : _valueobject) {
      document.<ValueObject>format(valueObject);
    }
  }
  
  protected void _format(final Entity entity, @Extension final IFormattableDocument document) {
    EList<Field> _fields = entity.getFields();
    for (final Field field : _fields) {
      document.<Field>format(field);
    }
    EList<Reference> _references = entity.getReferences();
    for (final Reference reference : _references) {
      document.<Reference>format(reference);
    }
  }
  
  public void format(final Object domainModel, final IFormattableDocument document) {
    if (domainModel instanceof XtextResource) {
      _format((XtextResource)domainModel, document);
      return;
    } else if (domainModel instanceof DomainModel) {
      _format((DomainModel)domainModel, document);
      return;
    } else if (domainModel instanceof Entity) {
      _format((Entity)domainModel, document);
      return;
    } else if (domainModel instanceof EObject) {
      _format((EObject)domainModel, document);
      return;
    } else if (domainModel == null) {
      _format((Void)null, document);
      return;
    } else if (domainModel != null) {
      _format(domainModel, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(domainModel, document).toString());
    }
  }
}
